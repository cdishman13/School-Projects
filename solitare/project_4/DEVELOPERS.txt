Global Variables:
char fclub: Keeps track of the club foundation
char fdiamond: Keeps track of the diamond foundation
char fheart: Keeps track of the heart foundation
char fspade: Keeps track of the spade foundation
struct table T: Keeps track of the columns
struct stockcards s: Keeps track of stock cards
struct wastecards w: Keeps track of waste cards
int turns: Keeps track of the turns
int limit: Keeps track of the amount of times you an reset the stock
int moves: Keeps track of them amount of moves
int line: Keeps track of the line we are reading in from
int tries: Keeps track of the number of configurations the program has tried
int config: Keeps track if the -v switch was used 
unsigned long RNG_seed: The seed the the user enters if the -s switch is used
char nameoffile: String that is used for the name of the file or the seed being used

int compareword(int size, char* str, FILE* inf)
	This fuction compares the next string in the file to the string 'str' of size 'size'.

int validcard(int c)
	This fuction checks to make sure that the card number is valid

int validatecolumn(char *p, char *c)
	This function checks if the current card can be put with previous card

char convert(char c)
	This function converts the letter cards with different characters so they 
	can more easily be compared in the function validatecolumn

void consumeWS(FILE* inf)
	This function gets rid of all white space and finds the next character

void initTableCol(int i, int c, int index)
	This function initializes the global struct T

void getSrcCards(int k, char cards[], char move[])
	This function gets cards for the source from the tableau to move to dest

void getCards(int i, char cards[])
	This function gets cards to compare to make sure the move is valid

void addToCol(int i, char cards[])
	This function adds cards to a column

void movepipe(char cards[])
	This function moves the '|' character for when a card is uncovered

void deleteFromCol(int k, int len)
	This function deletes cards from a column

void printBoardDebug()
	This function prints the board out and is used for debug

char* printHelp(int index, char col[], int c[], int k)
	This function helps the function printBoard. It returns the cards needed 
	to be printed

void printBoard()
	This function prints the board as a human readable output

int rulecheck(FILE* inf)
	This function checks the RULES: section
	It checks the amount of turns, should be 1 or 3
	It checks for "unlimited" or "limit N" where N is a number from 0-9

int foundationcheck(FILE* inf)
	This function checks the FOUNDATION: section
	This section checks the foundations 
	The foundations are in the order clubs, diamonds, hearts, then spades
	Checks if the number is valid, then checks the suit

int tablecheck(FILE* inf, int *cov)
	This function checks the TABLEAU: section
	This sections checks seven columns
	Each column has covered and uncovered parts. Covered | Uncovered
	This function will count the number of covered cards

int stockcheck(FILE* inf, int *st, int *wa)
	This function checks the STOCK: section
	This function checks the waste and stock cards
	The waste and stock cards are seperated by '|'
	This function counts the number of stock and waste cards

int movecheck(FILE* inf)
	This function checks the MOVES: section. Checks to see if all moves are valid
	Moves can either be '.', 'r', or src->dest

struct board initBoard(struct board b)
	This function initializes a struct board

int getIndex(char str[], char c)
	This function finds the index of a char in a string and returns it

int uncovered(struct board b)
	This function checks if there are any covered cards. Returns 1 is no covered cards

char* getColumn(int i, struct table* tab)
	This funcion returns the column corresponding to i

char* getTopCard(int i, struct table tab)
	This function gets the top card from a column that is uncovered

char* getBottomCard(int i, struct table tab)
	This function gets the bottom card from a column. If there is no cards
	then it returns "|"

void assignCol(int i, struct board* b, char col[])
	This function assigns the column i in board b to col.

void movecard(int s, int d, struct board* b, char src[])
	This function moves a cards src from column s to column d. If s is a 0, then
	it takes the card from waste.

int fcheck(struct board b, char card[])
	This function checks if a card can move to its foundation

void fmove(struct board* b, int i)
	This function moves a card from a column or from waste to a foundation

void printWord(char str[], int x, int y)
	This function prints a string starting at the cordnates (x,y)

void printCard(char str[], int x, int y)
	This function takes the card value from str and prints a card with the top left corner at (x,y)

void displayRules()
	This function displays the hotkeys and how to play the game.

void foundationPrint(struct board b)
	This function prints the foundation from the struct board

void clearWord(int x, int y, int len)
	This function clears out a line starting at (x,y) and goes for the length of len

void wastePrint(struct board b)
	This function prints the waste and stock, along with the amount of cards in each pile

void tableauPrint(struct board b)
	This function prints out the tableau

void displayBoard(struct board b)
	This function uses previous helper function to print the board that the user sees

void playgame(struct board b)
	This function is used to play the game. It sets up the board and then waits for certain hotkeys to be pressed.
	Once a hotkey is pressed it checks what it is and responds accordingly.

void initdeck(char arr[52][3])
	This function makes a deck of cards organized by suit.

double Random()
	This function returns a random number based off a RNG_seed

long choose_randomly_between(long a, long b)
	This function returns a random number between the numbers a and b

void Swap(char arr[52][3], int i, int j)
	This swaps cards at index i and j in the array arr

void shuffle(char deck[52][3])
	This function randomly shuffles the deck using help functions

struct board convertdeck(char deck[52][3])
	This function converts a char array to a struct for the deck


int main(int argc, char **argv)
	In the main function the program reads in either the flag -f or -s
	If -f is read in then the function reads from a file
	If -s is read then the function reads in a seed to be used to make the board
	To parse the text file, first get rid of any comments and white space before the RULES: section
	Then we use the function rulecheck to check the rule section
	Then we get rid of any whitespace until the FOUNDATION: section
	Then we use the function foundationcheck to check the foundation section
	Then we get rid of any whitespace until the TABLEAU: section
	Then we use the function tablecheck to check the tableau section
	Then we get rid of any whitespace until the STOCK: section
	Then we use the function stockcheck to check the stock section
	Then we get rid of whitespace until the MOVES: section
	Then the function starts the function playgame and the user is allowed to play the game
	Then the function ends